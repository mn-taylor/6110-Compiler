import printf;

// Global array and variable
int data[4];
int i;

void main() {
  int i;  // Shadows global i
  bool x;
  int k;

  // Manually separate assignment and array access to simulate side effects
  i = 0;
  i = i + 1;
  data[0] = i * 10;

  i = i + 1;
  data[1] = i * 10;

  i = i + 1;
  data[2] = i * 10;

  i = i + 1;
  data[3] = i * 10;

  // Nested loops with re-declared loop variables (should be legal in Decaf)
  for (i = 0; i < 2; i = i + 1) {
    int j;
    for (j = 0; j < 2; j = j + 1) {
      int i;  // New 'i' in inner-most loop scope
      for (i = 0; i < 1; i = i + 1) {
        printf("Innermost i = %d\n", i);
      }
    }
  }

  // Variable declared after it's used in the same block (should be invalid, but test how compiler reacts)
  // This line is valid in Decaf only if declaration-before-use is NOT enforced
  // Remove the comment if your compiler allows this
  // printf("undeclared y = %d\n", y);
  // int y;
  // y = 42;

  // Operator precedence test — no assignment-as-expression
  // int x;
  x = 1 + 2 * 3 < 8 == true;  // Should parse as ((1 + (2 * 3)) < 10) == true → (7 < 10) == true → true == true → true
  printf("x = %d (expect 1)\n", x);

  // Loop with funky increment pattern
  for (k = 0; k < 3; k = k + 1) {
    k = k + 1;  // Modifying loop var inside loop body
    printf("k = %d\n", k);
  }

  // Print array contents
  for (i = 0; i < 4; i = i + 1) {
    printf("data[%d] = %d\n", i, data[i]);
  }
}
